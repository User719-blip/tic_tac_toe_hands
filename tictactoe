import pygame as p
import time

p.init()

class Square(p.sprite.Sprite):
    def __init__(self, x_id, y_id, number):
        super().__init__()
        self.width = 120
        self.height = 120
        self.x = x_id * self.width
        self.y = y_id * self.height
        self.content = ''
        self.number = number
        self.image = blank_image
        self.image = p.transform.scale(self.image, (self.width, self.height))
        self.rect = self.image.get_rect()

    def update(self):
        self.rect.center = (self.x, self.y)

    def set_content(self, player):
        if self.content == '' and not won:
            self.content = player
            board[self.number] = player

            if player == 'x':
                self.image = x_image
                self.image = p.transform.scale(self.image, (self.width, self.height))
            else:
                self.image = o_image
                self.image = p.transform.scale(self.image, (self.width, self.height))

            checkWinner(self.content)


def checkWinner(player):
    global background, won, startX, startY, endX, endY

    for i in range(8):
        if board[winners[i][0]] == player and board[winners[i][1]] == player and board[winners[i][2]] == player:
            won = True
            getPos(winners[i][0], winners[i][2])
            break

    if won:
        Update()
        drawLine(startX, startY, endX, endY)

        square_group.empty()
        background = p.image.load(player.upper() + ' Wins.png')
        background = p.transform.scale(background, (WIDTH, HEIGHT))


def getPos(n1, n2):
    global startX, startY, endX, endY

    for sqs in squares:
        if sqs.number == n1:
            startX = sqs.x
            startY = sqs.y

        elif sqs.number == n2:
            endX = sqs.x
            endY = sqs.y


def drawLine(x1, y1, x2, y2):
    p.draw.line(win, (0, 0, 0), (x1, y1), (x2, y2), 15)
    p.display.update()
    time.sleep(2)


def Update():
    win.blit(background, (0, 0))
    square_group.draw(win)
    square_group.update()
    p.display.update()


WIDTH = 500
HEIGHT = 500

win = p.display.set_mode((WIDTH, HEIGHT))
p.display.set_caption('Tic Tac Toe')
clock = p.time.Clock()

blank_image = p.image.load('Blank.png')
x_image = p.image.load('x.png')
o_image = p.image.load('o.png')
background = p.image.load('Background.png')

background = p.transform.scale(background, (WIDTH, HEIGHT))

won = False

square_group = p.sprite.Group()
squares = []

winners = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
board = ['' for i in range(10)]

startX = 0
startY = 0
endX = 0
endY = 0

num = 1
for y in range(1, 4):
    for x in range(1, 4):
        sq = Square(x, y, num)
        square_group.add(sq)
        squares.append(sq)
        num += 1

def get_square_by_position(posx, posy):
    """Maps (posx, posy) grid coordinates to the square number"""
    mapping = {
        (1, 1): 1, (1, 2): 2, (1, 3): 3,
        (2, 1): 4, (2, 2): 5, (2, 3): 6,
        (3, 1): 7, (3, 2): 8, (3, 3): 9
    }
    return mapping.get((posx, posy))

turn = 'x'
run = True
while run:
    clock.tick(60)

    # Player inputs from the terminal for position
    try:
        posx = int(input(f"Player {turn}, enter x position (1-3): "))
        posy = int(input(f"Player {turn}, enter y position (1-3): "))
        
        if 1 <= posx <= 3 and 1 <= posy <= 3:
            square_number = get_square_by_position(posx, posy)
            if square_number is not None:
                square = squares[square_number - 1]
                square.set_content(turn)
                
                # Switch turns after a valid move
                if turn == 'x':
                    turn = 'o'
                else:
                    turn = 'x'
            else:
                print("Invalid position, please try again.")
        else:
            print("Invalid input, please enter values between 1 and 3.")
    except ValueError:
        print("Please enter valid integer positions.")

    # Update the game state and check for quit events
    for event in p.event.get():
        if event.type == p.QUIT:
            run = False

    Update()

p.quit()
